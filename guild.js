import { auth, database } from './firebase-config.js';
import { ref, set, get, push, onValue } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

class GuildSystem {
    constructor() {
        this.currentGuild = null;
        this.init();
    }

    init() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initGuildUI());
        } else {
            this.initGuildUI();
        }

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth.onAuthStateChanged((user) => {
            if (user) {
                this.loadGuilds();
            } else {
                this.currentGuild = null;
                const currentGuildDiv = document.getElementById('current-guild');
                if (currentGuildDiv) currentGuildDiv.style.display = 'none';
            }
        });
    }

    initGuildUI() {
        const guildPanel = document.getElementById('guild-info');
        if (!guildPanel) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç guild-info –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏
        guildPanel.innerHTML = `
            <div id="guild-container">
                <div id="current-guild" style="display: none;">
                    <h2>–ú–æ—è –≥–∏–ª—å–¥–∏—è</h2>
                    <div id="guild-details"></div>
                    <div id="guild-members"></div>
                    <button id="leave-guild">–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é</button>
                </div>
                
                <div id="create-guild-form">
                    <h2>–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é</h2>
                    <input type="text" id="guild-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏" required>
                    <textarea id="guild-description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏" required></textarea>
                    <select id="guild-type">
                        <option value="public">–ü—É–±–ª–∏—á–Ω–∞—è</option>
                        <option value="private">–ü—Ä–∏–≤–∞—Ç–Ω–∞—è</option>
                    </select>
                    <button id="create-guild-btn">–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é</button>
                </div>
                
                <div id="guild-list">
                    <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∏–ª—å–¥–∏–∏</h2>
                    <div id="available-guilds"></div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const createGuildBtn = document.getElementById('create-guild-btn');
        const leaveGuildBtn = document.getElementById('leave-guild');

        if (createGuildBtn) {
            createGuildBtn.addEventListener('click', () => this.createGuild());
        }
        if (leaveGuildBtn) {
            leaveGuildBtn.addEventListener('click', () => this.leaveGuild());
        }
    }

    async createGuild() {
        const nameInput = document.getElementById('guild-name');
        const descriptionInput = document.getElementById('guild-description');
        const typeInput = document.getElementById('guild-type');

        if (!nameInput || !descriptionInput || !typeInput) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏');
            return;
        }

        const name = nameInput.value.trim();
        const description = descriptionInput.value.trim();
        const type = typeInput.value;
        
        if (!name || !description) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }

        const user = auth.currentUser;
        if (!user) {
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        try {
            const guildRef = push(ref(database, 'guilds'));
            const newGuild = {
                name,
                description,
                type,
                leader: user.uid,
                members: {
                    [user.uid]: {
                        role: 'leader',
                        email: user.email,
                        joinDate: new Date().toISOString()
                    }
                },
                created: new Date().toISOString()
            };

            await set(guildRef, newGuild);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await set(ref(database, `users/${user.uid}/guild`), guildRef.key);
            
            this.currentGuild = guildRef.key;
            this.showGuildDetails(newGuild);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            nameInput.value = '';
            descriptionInput.value = '';
            typeInput.value = 'public';

            alert('–ì–∏–ª—å–¥–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏');
        }
    }

    async loadGuilds() {
        const user = auth.currentUser;
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–∏–ª—å–¥–∏–∏
            const userGuildRef = ref(database, `users/${user.uid}/guild`);
            const userGuildSnapshot = await get(userGuildRef);
            
            if (userGuildSnapshot.exists()) {
                this.currentGuild = userGuildSnapshot.val();
                const guildRef = ref(database, `guilds/${this.currentGuild}`);
                onValue(guildRef, (snapshot) => {
                    if (snapshot.exists()) {
                        this.showGuildDetails(snapshot.val());
                    }
                });
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π
            const guildsRef = ref(database, 'guilds');
            onValue(guildsRef, (snapshot) => {
                if (snapshot.exists()) {
                    this.showAvailableGuilds(snapshot.val());
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∏–ª—å–¥–∏–π:', error);
        }
    }

    showGuildDetails(guild) {
        const currentGuildDiv = document.getElementById('current-guild');
        const createGuildForm = document.getElementById('create-guild-form');
        const guildDetails = document.getElementById('guild-details');
        const guildMembers = document.getElementById('guild-members');

        if (!currentGuildDiv || !createGuildForm || !guildDetails || !guildMembers) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–∏–ª—å–¥–∏–∏');
            return;
        }

        currentGuildDiv.style.display = 'block';
        createGuildForm.style.display = 'none';

        guildDetails.innerHTML = `
            <h3>${guild.name}</h3>
            <p>${guild.description}</p>
            <p>–¢–∏–ø: ${guild.type === 'public' ? '–ü—É–±–ª–∏—á–Ω–∞—è' : '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}</p>
        `;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let membersHtml = '<h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</h4>';
        Object.entries(guild.members).forEach(([uid, member]) => {
            membersHtml += `
                <div class="guild-member">
                    <span>${member.role === 'leader' ? 'üëë' : 'üë§'}</span>
                    <span>${member.email || uid}</span>
                </div>
            `;
        });
        guildMembers.innerHTML = membersHtml;
    }

    showAvailableGuilds(guilds) {
        const availableGuildsDiv = document.getElementById('available-guilds');
        if (!availableGuildsDiv) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç available-guilds');
            return;
        }

        let html = '';
        Object.entries(guilds).forEach(([guildId, guild]) => {
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∏–ª—å–¥–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –Ω–µ–π
            if (guildId === this.currentGuild) return;

            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–∏–ª—å–¥–∏–∏
            if (guild.type === 'private') return;

            html += `
                <div class="guild-item">
                    <h3>${guild.name}</h3>
                    <p>${guild.description}</p>
                    <p>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${Object.keys(guild.members).length}</p>
                    <button onclick="window.guildSystem.joinGuild('${guildId}')">–í—Å—Ç—É–ø–∏—Ç—å</button>
                </div>
            `;
        });

        availableGuildsDiv.innerHTML = html || '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π</p>';
    }

    async joinGuild(guildId) {
        const user = auth.currentUser;
        if (!user) {
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏
            if (this.currentGuild) {
                alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –≥–∏–ª—å–¥–∏—é');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–∏–ª—å–¥–∏—é
            await set(ref(database, `guilds/${guildId}/members/${user.uid}`), {
                role: 'member',
                email: user.email,
                joinDate: new Date().toISOString()
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await set(ref(database, `users/${user.uid}/guild`), guildId);

            this.currentGuild = guildId;
            alert('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥–∏–ª—å–¥–∏—é!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥–∏–ª—å–¥–∏—é:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥–∏–ª—å–¥–∏—é');
        }
    }

    async leaveGuild() {
        const user = auth.currentUser;
        if (!user || !this.currentGuild) {
            alert('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏');
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
            const guildRef = ref(database, `guilds/${this.currentGuild}`);
            const guildSnapshot = await get(guildRef);
            const guild = guildSnapshot.val();

            if (guild.leader === user.uid) {
                if (Object.keys(guild.members).length > 1) {
                    alert('–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º');
                    return;
                }
                // –ï—Å–ª–∏ –ª–∏–¥–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, —É–¥–∞–ª—è–µ–º –≥–∏–ª—å–¥–∏—é
                await set(guildRef, null);
            } else {
                // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–∏–ª—å–¥–∏–∏
                await set(ref(database, `guilds/${this.currentGuild}/members/${user.uid}`), null);
            }

            // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∏–ª—å–¥–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await set(ref(database, `users/${user.uid}/guild`), null);

            this.currentGuild = null;
            const currentGuildDiv = document.getElementById('current-guild');
            const createGuildForm = document.getElementById('create-guild-form');

            if (currentGuildDiv) currentGuildDiv.style.display = 'none';
            if (createGuildForm) createGuildForm.style.display = 'block';

            alert('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–∏–ª—å–¥–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–∏–ª—å–¥–∏–∏');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –≥–∏–ª—å–¥–∏–π
window.guildSystem = new GuildSystem();
