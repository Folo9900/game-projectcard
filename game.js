import { auth, database } from './firebase-config.js';
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
import { ref, onValue, set, push } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';
import { cardSystem } from './cards.js';

let map;
let userMarker;
let watchId;
let visibleCards = new Map();
let inventory = new Map();
let experience = 0;
let level = 1;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap(position) {
    if (map) {
        map.remove();
    }

    const lat = position ? position.coords.latitude : 55.7558;
    const lng = position ? position.coords.longitude : 37.6173;

    map = L.map('map').setView([lat, lng], 16);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–≥—Ä–æ–∫–∞
    userMarker = L.marker([lat, lng], {
        icon: L.divIcon({
            className: 'player-marker',
            html: 'üë§',
            iconSize: [30, 30]
        })
    }).addTo(map);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const cardMarker = L.marker([55.7558, 37.6173], {
        icon: L.divIcon({
            className: 'card-marker',
            html: 'üé¥',
            iconSize: [30, 30]
        })
    }).addTo(map);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
    map.on('move', () => {
        const playerPos = userMarker.getLatLng();
        const cardPos = cardMarker.getLatLng();
        const distance = playerPos.distanceTo(cardPos);
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –º–µ—Ç—Ä–æ–≤ –æ—Ç –∫–∞—Ä—Ç—ã
        if (distance < 10) {
            cardMarker.remove(); // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É —Å –∫–∞—Ä—Ç—ã
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            console.log('–ö–∞—Ä—Ç–∞ —Å–æ–±—Ä–∞–Ω–∞!');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (auth.currentUser) {
                const cardData = {
                    collectedAt: Date.now(),
                    location: {
                        lat: cardPos.lat,
                        lng: cardPos.lng
                    }
                };
                
                const userCardsRef = ref(database, `users/${auth.currentUser.uid}/cards/${Date.now()}`);
                set(userCardsRef, cardData).then(() => {
                    console.log('–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ');
                }).catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
                });
            }
        }
    });

    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    updateNearbyCards({ coords: { latitude: lat, longitude: lng } });
}

// –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function requestLocation() {
    if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                initMap(position);
                startLocationTracking();
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                initMap(null); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            },
            {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            }
        );
    } else {
        console.error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        initMap(null);
    }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function startLocationTracking() {
    if ('geolocation' in navigator) {
        watchId = navigator.geolocation.watchPosition(
            (position) => {
                const { latitude, longitude } = position.coords;
                window.userPosition = position; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                if (userMarker) {
                    userMarker.setLatLng([latitude, longitude]);
                    map.setView([latitude, longitude]);
                }
                updateNearbyCards(position);
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error);
            },
            {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            }
        );
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function stopLocationTracking() {
    if (watchId) {
        navigator.geolocation.clearWatch(watchId);
        watchId = null;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
function updateNearbyCards(position) {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    visibleCards.forEach(marker => marker.remove());
    visibleCards.clear();

    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç
    const cardEmojis = {
        '–°—É—â–µ—Å—Ç–≤–æ': 'üêâ',
        '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ': '‚ú®',
        '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç': 'üé≠',
        '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è': 'üëë',
        '–†–µ–¥–∫–∞—è': 'üíé',
        '–û–±—ã—á–Ω–∞—è': 'üÉè'
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const cardsRef = ref(database, 'cards');
    onValue(cardsRef, (snapshot) => {
        const cards = snapshot.val();
        if (!cards) return;

        Object.entries(cards).forEach(([id, card]) => {
            if (card.location) {
                const distance = calculateDistance(
                    position.coords.latitude,
                    position.coords.longitude,
                    card.location.lat,
                    card.location.lng
                );

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 100 –º–µ—Ç—Ä–æ–≤
                if (distance <= 0.1) {
                    const emoji = cardEmojis[card.type] || cardEmojis[card.rarity] || 'üÉè';
                    const marker = L.marker([card.location.lat, card.location.lng], {
                        icon: L.divIcon({
                            className: `card-marker ${card.rarity.toLowerCase()}`,
                            html: `<div class="card-emoji">${emoji}</div>`,
                            iconSize: [40, 40]
                        })
                    }).addTo(map);

                    marker.on('click', () => collectCard(id, card));
                    visibleCards.set(id, marker);
                }
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
function initChat() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-message-input');
    const chatSendBtn = document.getElementById('chat-send-btn');
    
    if (!chatMessages || !chatInput || !chatSendBtn) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
            messages: !!chatMessages,
            input: !!chatInput,
            button: !!chatSendBtn
        });
        return;
    }

    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã');

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage() {
        if (!auth.currentUser) {
            console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        const text = chatInput.value.trim();
        if (!text) {
            console.log('–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', text);

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messagesRef = ref(database, 'chat/messages');
        const newMessageRef = push(messagesRef);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = {
            user: auth.currentUser.email,
            text: text,
            timestamp: Date.now()
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        set(newMessageRef, message)
            .then(() => {
                console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                chatInput.value = '';
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            });
    }

    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messagesRef = ref(database, 'chat/messages');
    onValue(messagesRef, (snapshot) => {
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        const messages = snapshot.val() || {};
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        chatMessages.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        Object.values(messages)
            .sort((a, b) => a.timestamp - b.timestamp)
            .forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'chat-message';
                messageDiv.innerHTML = `
                    <span class="chat-user">${msg.user}:</span>
                    <span class="chat-text">${msg.text}</span>
                    <span class="chat-time">${new Date(msg.timestamp).toLocaleTimeString()}</span>
                `;
                chatMessages.appendChild(messageDiv);
            });

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    chatSendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    console.log('–ß–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
function showPanel(panelName) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å:', panelName);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏
    const panels = document.querySelectorAll('.panel');
    const buttons = document.querySelectorAll('.nav-btn');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    panels.forEach(panel => {
        panel.style.display = 'none';
        panel.classList.remove('active');
    });
    
    buttons.forEach(button => {
        button.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const panel = document.getElementById(`${panelName}-panel`);
    const button = document.getElementById(`${panelName}-btn`);
    
    if (panel && button) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        switch(panelName) {
            case 'chat':
                panel.style.display = 'flex';
                break;
            case 'inventory':
            case 'guild':
                panel.style.display = 'flex';
                break;
            default:
                panel.style.display = 'block';
        }
        
        panel.classList.add('active');
        button.classList.add('active');
        
        console.log(`–ü–∞–Ω–µ–ª—å ${panelName} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, display:`, panel.style.display);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Ç, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        if (panelName === 'chat') {
            const chatMessages = document.getElementById('chat-messages');
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }
    } else {
        console.error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è ${panelName}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    onAuthStateChanged(auth, async (user) => {
        if (user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
            initChat();
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userInventoryRef = ref(database, `users/${user.uid}/inventory`);
            onValue(userInventoryRef, (snapshot) => {
                const data = snapshot.val();
                inventory.clear();
                if (data) {
                    Object.entries(data).forEach(([id, card]) => {
                        inventory.set(id, card);
                    });
                }
                updateInventoryDisplay();
            });

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            requestLocation();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            document.getElementById('map-btn').addEventListener('click', () => showPanel('map'));
            document.getElementById('inventory-btn').addEventListener('click', () => showPanel('inventory'));
            document.getElementById('guild-btn').addEventListener('click', () => showPanel('guild'));
            document.getElementById('chat-btn').addEventListener('click', () => showPanel('chat'));
            document.getElementById('logout-btn').addEventListener('click', () => {
                auth.signOut();
                window.location.reload();
            });

        } else {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            document.getElementById('game-container').style.display = 'none';
            document.getElementById('auth-container').style.display = 'block';
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
function updatePlayerInfo(userData) {
    const levelElement = document.getElementById('player-level');
    const experienceElement = document.getElementById('experience-bar');

    if (levelElement && experienceElement) {
        const level = userData.level || 1;
        const experience = userData.experience || 0;
        const nextLevelExp = level * 100;

        levelElement.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${level}`;
        experienceElement.textContent = `–û–ø—ã—Ç: ${experience}/${nextLevelExp}`;
    }
}

// –°–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
function collectCard(card) {
    if (cardSystem.collectCard(card)) {
        addExperience(card.power);
        updateInventoryDisplay();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
function addExperience(amount) {
    experience += amount;
    const newLevel = Math.floor(Math.sqrt(experience / 100)) + 1;
    
    if (newLevel > level) {
        level = newLevel;
        alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${level} —É—Ä–æ–≤–Ω—è!`);
    }
    
    updateStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    if (auth.currentUser) {
        const userRef = ref(database, `users/${auth.currentUser.uid}`);
        set(userRef, {
            experience: experience,
            level: level,
            lastUpdate: Date.now()
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function updateInventoryDisplay() {
    const container = document.getElementById('inventory-list');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:', inventory.size);
    container.innerHTML = '';

    if (inventory.size === 0) {
        container.innerHTML = '<div class="no-cards">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫</div>';
        return;
    }

    inventory.forEach(card => {
        const cardElement = document.createElement('div');
        cardElement.className = 'inventory-card';
        cardElement.innerHTML = `
            <div class="card-header ${card.rarity.toLowerCase()}">
                <h3>${card.name}</h3>
                <span class="card-type">${card.type}</span>
            </div>
            <div class="card-stats">
                <div class="stat">
                    <span class="label">–ê—Ç–∞–∫–∞:</span>
                    <span class="value">${card.attack}</span>
                </div>
                <div class="stat">
                    <span class="label">–ó–∞—â–∏—Ç–∞:</span>
                    <span class="value">${card.defense}</span>
                </div>
            </div>
            <div class="card-description">
                <p>${card.description}</p>
            </div>
            <div class="card-footer">
                <span class="card-rarity">${card.rarity}</span>
            </div>
        `;
        container.appendChild(cardElement);
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
initGame();
