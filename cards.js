import { app, auth, database } from './firebase-config.js';
import { ref, onValue, set, push, get } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

class CardSystem {
    constructor() {
        this.cards = new Map();
        this.loadOrCreateCards();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ collectCard –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
        window.collectCard = this.collectCard.bind(this);
    }

    async loadOrCreateCards() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const localCards = localStorage.getItem('cards');
            if (localCards) {
                const cardsData = JSON.parse(localCards);
                for (const [id, card] of Object.entries(cardsData)) {
                    this.cards.set(id, card);
                }
                console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', this.cards.size);
            }

            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Firebase
            if (auth.currentUser) {
                const cardsRef = ref(database, 'cards');
                const snapshot = await get(cardsRef);
                
                if (!snapshot.exists()) {
                    console.log('–°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
                    await this.createInitialCards();
                } else {
                    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
                    const cardsData = snapshot.val();
                    for (const [id, card] of Object.entries(cardsData)) {
                        this.cards.set(id, card);
                    }
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    localStorage.setItem('cards', JSON.stringify(Object.fromEntries(this.cards)));
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                await this.addStarterCards();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
        }
    }

    async createInitialCards() {
        const initialCards = this.generateInitialCards();
        try {
            if (auth.currentUser) {
                const cardsRef = ref(database, 'cards');
                await set(cardsRef, initialCards);
            }
            
            for (const [id, card] of Object.entries(initialCards)) {
                this.cards.set(id, card);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            localStorage.setItem('cards', JSON.stringify(initialCards));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            for (const [id, card] of Object.entries(initialCards)) {
                this.cards.set(id, card);
            }
            localStorage.setItem('cards', JSON.stringify(initialCards));
        }
    }

    generateInitialCards() {
        const cards = {};
        const types = ['–°—É—â–µ—Å—Ç–≤–æ', '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ', '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç'];
        const rarities = ['–û–±—ã—á–Ω–∞—è', '–†–µ–¥–∫–∞—è', '–≠–ø–∏—á–µ—Å–∫–∞—è', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        const generateNearbyLocation = (center) => {
            const radius = 0.005; // –ø—Ä–∏–º–µ—Ä–Ω–æ 500 –º–µ—Ç—Ä–æ–≤
            
            const lat = center.lat + (Math.random() - 0.5) * radius * 2;
            const lng = center.lng + (Math.random() - 0.5) * radius * 2;
            
            return { lat, lng };
        };

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        let center = { lat: 55.7558, lng: 37.6173 }; // –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        if (window.userPosition) {
            center = {
                lat: window.userPosition.coords.latitude,
                lng: window.userPosition.coords.longitude
            };
        }
        
        for (let i = 0; i < 10; i++) {
            const type = types[Math.floor(Math.random() * types.length)];
            const rarity = rarities[Math.floor(Math.random() * rarities.length)];
            const location = generateNearbyLocation(center);
            
            const id = `card_${i + 1}`;
            cards[id] = {
                id,
                name: `${type} #${i + 1}`,
                type,
                rarity,
                power: Math.floor(Math.random() * 10) + 1,
                location: location,
                collected: {}
            };
        }
        
        return cards;
    }

    getCardsInRadius(center, radius) {
        const result = [];
        
        this.cards.forEach(card => {
            const distance = this.calculateDistance(
                center.lat,
                center.lng,
                card.location.lat,
                card.location.lng
            );
            
            if (distance <= radius) {
                result.push(card);
            }
        });
        
        return result;
    }

    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const œÜ1 = lat1 * Math.PI/180;
        const œÜ2 = lat2 * Math.PI/180;
        const ŒîœÜ = (lat2-lat1) * Math.PI/180;
        const ŒîŒª = (lon2-lon1) * Math.PI/180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                Math.cos(œÜ1) * Math.cos(œÜ2) *
                Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c;
    }

    createCardMarker(card, map) {
        const marker = L.marker([card.location.lat, card.location.lng], {
            icon: L.divIcon({
                className: 'card-marker',
                html: 'üé¥',
                iconSize: [30, 30]
            })
        }).addTo(map);

        marker.bindPopup(`
            <div class="card-popup">
                <h3>${card.name}</h3>
                <p>–¢–∏–ø: ${card.type}</p>
                <p>–†–µ–¥–∫–æ—Å—Ç—å: ${card.rarity}</p>
                <p>–°–∏–ª–∞: ${card.power}</p>
                <button onclick="collectCard('${card.id}')">–°–æ–±—Ä–∞—Ç—å</button>
            </div>
        `);

        return marker;
    }

    async collectCard(cardId) {
        try {
            const card = this.cards.get(cardId);
            if (!card) {
                console.error('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', cardId);
                return;
            }

            const userId = auth.currentUser?.uid;
            if (!userId) {
                console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (!card.collected) card.collected = {};
            card.collected[userId] = true;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            localStorage.setItem('cards', JSON.stringify(Object.fromEntries(this.cards)));

            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≤ Firebase
            try {
                if (auth.currentUser) {
                    const cardRef = ref(database, `cards/${cardId}/collected/${userId}`);
                    await set(cardRef, true);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase:', error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }

            console.log('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—Ä–∞–Ω–∞:', cardId);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
            return false;
        }
    }

    async addStarterCards() {
        if (!auth.currentUser) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏');
            return;
        }

        const userId = auth.currentUser.uid;
        const userInventoryRef = ref(database, `users/${userId}/inventory`);
        
        try {
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            const snapshot = await get(userInventoryRef);
            if (snapshot.exists()) {
                console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ');
                return;
            }

            console.log('–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            const starterCards = {
                'starter1': {
                    id: 'starter1',
                    name: '–•—Ä–∞–±—Ä—ã–π –í–æ–∏–Ω',
                    type: '–°—É—â–µ—Å—Ç–≤–æ',
                    rarity: '–û–±—ã—á–Ω–∞—è',
                    attack: 2,
                    defense: 2,
                    description: '–ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞. –í–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏.'
                },
                'starter2': {
                    id: 'starter2',
                    name: '–û–≥–Ω–µ–Ω–Ω—ã–π –®–∞—Ä',
                    type: '–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ',
                    rarity: '–û–±—ã—á–Ω–∞—è',
                    attack: 3,
                    defense: 0,
                    description: '–ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞. –ë–∞–∑–æ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –æ–≥–Ω—è.'
                },
                'starter3': {
                    id: 'starter3',
                    name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –©–∏—Ç',
                    type: '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç',
                    rarity: '–û–±—ã—á–Ω–∞—è',
                    attack: 0,
                    defense: 3,
                    description: '–ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞. –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ –Ω–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞.'
                },
                'starter4': {
                    id: 'starter4',
                    name: '–£—á–µ–Ω–∏–∫ –ú–∞–≥–∞',
                    type: '–°—É—â–µ—Å—Ç–≤–æ',
                    rarity: '–û–±—ã—á–Ω–∞—è',
                    attack: 1,
                    defense: 3,
                    description: '–ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞. –ù–∞—á–∏–Ω–∞—é—â–∏–π –º–∞–≥ —Å –±–æ–ª—å—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º.'
                }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await set(userInventoryRef, starterCards);
            console.log('–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
        }
    }
}

export const cardSystem = new CardSystem();
